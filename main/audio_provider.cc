#include "audio_provider.h"

#include "device_config.h"

i2s_chan_handle_t rx_handle;
/* Get the default channel configuration by helper macro.
 * This helper macro is defined in 'i2s_common.h' and shared by all the I2S communication modes.
 * It can help to specify the I2S role and port ID */
i2s_chan_config_t chan_cfg = {
    .id = I2S_NUM_0,
    .role = I2S_ROLE_MASTER,
    .dma_desc_num = 6 ,
    .dma_frame_num = SAMPLE_SIZE ,
    .auto_clear = 0 
};
/* Allocate a new RX channel and get the handle of this channel */
esp_err_t new_channel_ok = i2s_new_channel(&chan_cfg, NULL, &rx_handle);


/* Setting the configurations, the slot configuration and clock configuration can be generated by the macros
 * These two helper macros are defined in 'i2s_std.h' which can only be used in STD mode.
 * They can help to specify the slot and clock configurations for initialization or updating */
i2s_std_config_t std_cfg = {
    .clk_cfg = i2s_std_clk_config_t{
        .sample_rate_hz = SAMPLE_RATE ,
        .clk_src =  I2S_CLK_SRC_DEFAULT,
        .mclk_multiple = I2S_MCLK_MULTIPLE_384
    },
    .slot_cfg = i2s_std_slot_config_t{
        .data_bit_width = I2S_DATA_BIT_WIDTH_24BIT,
        .slot_bit_width = I2S_SLOT_BIT_WIDTH_24BIT,
        .slot_mode = I2S_SLOT_MODE_MONO,
        .slot_mask = I2S_STD_SLOT_RIGHT,
        .ws_width = I2S_DATA_BIT_WIDTH_24BIT, 
        .ws_pol = false, 
        .bit_shift = true
    },
    .gpio_cfg = {
        .mclk = I2S_GPIO_UNUSED,
        .bclk = GPIO_NUM_14,
        .ws = GPIO_NUM_15,
        .dout = I2S_GPIO_UNUSED,
        .din = GPIO_NUM_32,
        .invert_flags = {
            .mclk_inv = false,
            .bclk_inv = false,
            .ws_inv = false,
        },
    },
};

bool I2S_begin(){
    /* Initialize the channel */
    if ((i2s_channel_init_std_mode(rx_handle, &std_cfg) == ESP_OK) && (i2s_channel_enable(rx_handle) == ESP_OK)) {
        ESP_LOGI("I2S", "I2S channel init succeed");
        ESP_LOGI("I2S", "I2S channel enable succeed");
        return true;
    }else{
        ESP_LOGE("I2S", "I2S channel init failed");
        return false;
    }
}

void I2S_read(int32_t samples[], int sample_size){
    size_t bytes_read;
    i2s_channel_read(rx_handle, samples, sample_size * sizeof(int32_t), &bytes_read, 100);
    //printf("%d\n", bytes_read);
}

void I2S_stop(){
    /* Have to stop the channel before deleting it */
    i2s_channel_disable(rx_handle);
    /* If the handle is not needed any more, delete it to release the channel resources */
    i2s_del_channel(rx_handle);
}


